/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bbk.example.plugin.compare;

import ec.nbdemetra.ui.DemetraUiIcon;
import ec.nbdemetra.ui.NbComponents;
import ec.tss.Ts;
import ec.tss.TsFactory;
import ec.tss.TsInformationType;
import ec.tss.TsStatus;
import ec.tss.html.AbstractHtmlElement;
import ec.tss.html.HtmlStream;
import ec.tss.html.HtmlTag;
import ec.tstoolkit.data.DescriptiveStatistics;
import ec.tstoolkit.stats.AutoCorrelations;
import ec.tstoolkit.timeseries.simplets.TsData;
import ec.ui.Disposables;
import ec.ui.chart.JTsDualChart;
import ec.ui.interfaces.ITsCollectionView;
import ec.ui.list.JTsList;
import ec.ui.view.tsprocessing.TsViewToolkit;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JSplitPane;
import javax.swing.JToolBar;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Compare Plugin UI.
 */
@TopComponent.Description(
        preferredID = "CompareTopComponent",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "bbk.example.plugin.compare.CompareTopComponent")
@ActionReference(path = "Menu/Tools", position = 20000)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CompareAction",
        preferredID = "CompareTopComponent"
)
@Messages({
    "CTL_CompareAction=Compare",
    "CTL_CompareTopComponent=Compare Window",
    "HINT_CompareTopComponent=This is a Compare window"
})
public final class CompareTopComponent extends TopComponent {

    private final JToolBar toolBarRepresentation;
    private final JButton runButton;
    private final JSplitPane mainPane;
    private final JTsList list;
    private final JTsDualChart chart;
    private final Box html;

    public CompareTopComponent() {
        initComponents();
        setName(Bundle.CTL_CompareTopComponent());
        setToolTipText(Bundle.HINT_CompareTopComponent());
        toolBarRepresentation = NbComponents.newInnerToolbar();
        runButton = new JButton(DemetraUiIcon.COMPILE_16);
        runButton.setToolTipText("Run");
        initButton();

        toolBarRepresentation.add(runButton);
        toolBarRepresentation.setFloatable(false);

        list = new JTsList();
        chart = new JTsDualChart();
        chart.setTsUpdateMode(ITsCollectionView.TsUpdateMode.None);

        html = Box.createHorizontalBox();

        JSplitPane outputPane = NbComponents.newJSplitPane(JSplitPane.VERTICAL_SPLIT, chart, html);

        mainPane = NbComponents.newJSplitPane(JSplitPane.HORIZONTAL_SPLIT, list, outputPane);

        setLayout(new BorderLayout());
        add(toolBarRepresentation, BorderLayout.NORTH);
        add(mainPane, BorderLayout.CENTER);
        mainPane.setDividerLocation(.5);
        mainPane.setResizeWeight(.5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void initButton() {
        runButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                chart.getTsCollection().clear();

                if (list.getTsCollection().getCount() >= 2) {
                    Ts a = list.getTsCollection().get(0);
                    Ts b = list.getTsCollection().get(1);
                    if (a.hasData() == TsStatus.Undefined) {
                        a.load(TsInformationType.Data);
                    }
                    if (b.hasData() == TsStatus.Undefined) {
                        b.load(TsInformationType.Data);
                    }
                    try {
                        TsData diff = a.getTsData().minus(b.getTsData()).abs();
                        Ts t = TsFactory.instance.createTs("Difference \"" + a.getRawName() + "\" - \"" + b.getRawName() + "\"", null, diff);
                        chart.getTsCollection().add(a);
                        chart.getTsCollection().add(b);
                        chart.getTsCollection().add(t);
                        chart.setTsLevel(2, true);
                    } catch (Exception ex) {
                        NotifyDescriptor nd = new NotifyDescriptor.Message(ex.getMessage());
                        DialogDisplayer.getDefault().notify(nd);
                    }

                    DescriptiveStatistics dsForTsA = new DescriptiveStatistics(a.getTsData());
                    DescriptiveStatistics dsForTsB = new DescriptiveStatistics(b.getTsData());

                    Disposables.disposeAndRemoveAll(html)
                            .add(TsViewToolkit.getInstance().getHtmlViewer(new HtmlText(dsForTsA, dsForTsB)));
                    validate();
                }
            }
        });
    }

    private class HtmlText extends AbstractHtmlElement {

        private final DescriptiveStatistics dsForTsA, dsForTsB;

        public HtmlText(DescriptiveStatistics dsForTsA, DescriptiveStatistics dsForTsB) {
            this.dsForTsA = dsForTsA;
            this.dsForTsB = dsForTsB;
        } 

        @Override
        public void write(HtmlStream stream) throws IOException {
            stream.write(HtmlTag.HEADER1, h1, "Information").newLine();

            stream.write(HtmlTag.HEADER2, h2, "Time series 1").newLine();
            stream.write("Stdev: " + dsForTsA.getStdev()).newLine();
            stream.write("Average: " + dsForTsA.getAverage()).newLine();
            stream.write("Min: " + dsForTsA.getMin()).newLine();
            stream.write("Max: " + dsForTsA.getMax()).newLine();
            stream.write("Autocorrelation: " + new AutoCorrelations(dsForTsA).autoCorrelation(1)).newLines(2);

            stream.write(HtmlTag.HEADER2, h2, "Time series 2").newLine();
            stream.write("Stdev: " + dsForTsB.getStdev()).newLine();
            stream.write("Average: " + dsForTsB.getAverage()).newLine();
            stream.write("Min: " + dsForTsB.getMin()).newLine();
            stream.write("Max: " + dsForTsB.getMax()).newLine();
            stream.write("Autocorrelation (Durbin Watson): " + new AutoCorrelations(dsForTsB).getDurbinWatson()).newLines(2);
        }
    }
}
